// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: transfer_fromto.go
// DO NOT EDIT!

package models

import (
	"bytes"
	"fmt"

	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *TransferCounterpartyInfo) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *TransferCounterpartyInfo) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if j.UserID != 0 {
		buf.WriteString(`"UserID":`)
		fflib.FormatBits2(buf, uint64(j.UserID), 10, j.UserID < 0)
		buf.WriteByte(',')
	}
	if len(j.UserName) != 0 {
		buf.WriteString(`"UserName":`)
		fflib.WriteJsonString(buf, string(j.UserName))
		buf.WriteByte(',')
	}
	if j.ContactID != 0 {
		buf.WriteString(`"ContactID":`)
		fflib.FormatBits2(buf, uint64(j.ContactID), 10, j.ContactID < 0)
		buf.WriteByte(',')
	}
	if len(j.ContactName) != 0 {
		buf.WriteString(`"ContactName":`)
		fflib.WriteJsonString(buf, string(j.ContactName))
		buf.WriteByte(',')
	}
	if len(j.Note) != 0 {
		buf.WriteString(`"Note":`)
		fflib.WriteJsonString(buf, string(j.Note))
		buf.WriteByte(',')
	}
	if len(j.Comment) != 0 {
		buf.WriteString(`"Comment":`)
		fflib.WriteJsonString(buf, string(j.Comment))
		buf.WriteByte(',')
	}
	if j.ReminderID != 0 {
		buf.WriteString(`"ReminderID":`)
		fflib.FormatBits2(buf, uint64(j.ReminderID), 10, j.ReminderID < 0)
		buf.WriteByte(',')
	}
	if len(j.TgBotID) != 0 {
		buf.WriteString(`"TgBotID":`)
		fflib.WriteJsonString(buf, string(j.TgBotID))
		buf.WriteByte(',')
	}
	if j.TgChatID != 0 {
		buf.WriteString(`"TgChatID":`)
		fflib.FormatBits2(buf, uint64(j.TgChatID), 10, j.TgChatID < 0)
		buf.WriteByte(',')
	}
	if j.TgReceiptByTgMsgID != 0 {
		buf.WriteString(`"TgReceiptByTgMsgID":`)
		fflib.FormatBits2(buf, uint64(j.TgReceiptByTgMsgID), 10, j.TgReceiptByTgMsgID < 0)
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffjtTransferCounterpartyInfobase = iota
	ffjtTransferCounterpartyInfonosuchkey

	ffjtTransferCounterpartyInfoUserID

	ffjtTransferCounterpartyInfoUserName

	ffjtTransferCounterpartyInfoContactID

	ffjtTransferCounterpartyInfoContactName

	ffjtTransferCounterpartyInfoNote

	ffjtTransferCounterpartyInfoComment

	ffjtTransferCounterpartyInfoReminderID

	ffjtTransferCounterpartyInfoTgBotID

	ffjtTransferCounterpartyInfoTgChatID

	ffjtTransferCounterpartyInfoTgReceiptByTgMsgID
)

var ffjKeyTransferCounterpartyInfoUserID = []byte("UserID")

var ffjKeyTransferCounterpartyInfoUserName = []byte("UserName")

var ffjKeyTransferCounterpartyInfoContactID = []byte("ContactID")

var ffjKeyTransferCounterpartyInfoContactName = []byte("ContactName")

var ffjKeyTransferCounterpartyInfoNote = []byte("Note")

var ffjKeyTransferCounterpartyInfoComment = []byte("Comment")

var ffjKeyTransferCounterpartyInfoReminderID = []byte("ReminderID")

var ffjKeyTransferCounterpartyInfoTgBotID = []byte("TgBotID")

var ffjKeyTransferCounterpartyInfoTgChatID = []byte("TgChatID")

var ffjKeyTransferCounterpartyInfoTgReceiptByTgMsgID = []byte("TgReceiptByTgMsgID")

// UnmarshalJSON umarshall json - template of ffjson
func (j *TransferCounterpartyInfo) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *TransferCounterpartyInfo) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtTransferCounterpartyInfobase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtTransferCounterpartyInfonosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'C':

					if bytes.Equal(ffjKeyTransferCounterpartyInfoContactID, kn) {
						currentKey = ffjtTransferCounterpartyInfoContactID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyTransferCounterpartyInfoContactName, kn) {
						currentKey = ffjtTransferCounterpartyInfoContactName
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyTransferCounterpartyInfoComment, kn) {
						currentKey = ffjtTransferCounterpartyInfoComment
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'N':

					if bytes.Equal(ffjKeyTransferCounterpartyInfoNote, kn) {
						currentKey = ffjtTransferCounterpartyInfoNote
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'R':

					if bytes.Equal(ffjKeyTransferCounterpartyInfoReminderID, kn) {
						currentKey = ffjtTransferCounterpartyInfoReminderID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'T':

					if bytes.Equal(ffjKeyTransferCounterpartyInfoTgBotID, kn) {
						currentKey = ffjtTransferCounterpartyInfoTgBotID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyTransferCounterpartyInfoTgChatID, kn) {
						currentKey = ffjtTransferCounterpartyInfoTgChatID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyTransferCounterpartyInfoTgReceiptByTgMsgID, kn) {
						currentKey = ffjtTransferCounterpartyInfoTgReceiptByTgMsgID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'U':

					if bytes.Equal(ffjKeyTransferCounterpartyInfoUserID, kn) {
						currentKey = ffjtTransferCounterpartyInfoUserID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyTransferCounterpartyInfoUserName, kn) {
						currentKey = ffjtTransferCounterpartyInfoUserName
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyTransferCounterpartyInfoTgReceiptByTgMsgID, kn) {
					currentKey = ffjtTransferCounterpartyInfoTgReceiptByTgMsgID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyTransferCounterpartyInfoTgChatID, kn) {
					currentKey = ffjtTransferCounterpartyInfoTgChatID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyTransferCounterpartyInfoTgBotID, kn) {
					currentKey = ffjtTransferCounterpartyInfoTgBotID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyTransferCounterpartyInfoReminderID, kn) {
					currentKey = ffjtTransferCounterpartyInfoReminderID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyTransferCounterpartyInfoComment, kn) {
					currentKey = ffjtTransferCounterpartyInfoComment
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyTransferCounterpartyInfoNote, kn) {
					currentKey = ffjtTransferCounterpartyInfoNote
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyTransferCounterpartyInfoContactName, kn) {
					currentKey = ffjtTransferCounterpartyInfoContactName
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyTransferCounterpartyInfoContactID, kn) {
					currentKey = ffjtTransferCounterpartyInfoContactID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyTransferCounterpartyInfoUserName, kn) {
					currentKey = ffjtTransferCounterpartyInfoUserName
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyTransferCounterpartyInfoUserID, kn) {
					currentKey = ffjtTransferCounterpartyInfoUserID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtTransferCounterpartyInfonosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtTransferCounterpartyInfoUserID:
					goto handle_UserID

				case ffjtTransferCounterpartyInfoUserName:
					goto handle_UserName

				case ffjtTransferCounterpartyInfoContactID:
					goto handle_ContactID

				case ffjtTransferCounterpartyInfoContactName:
					goto handle_ContactName

				case ffjtTransferCounterpartyInfoNote:
					goto handle_Note

				case ffjtTransferCounterpartyInfoComment:
					goto handle_Comment

				case ffjtTransferCounterpartyInfoReminderID:
					goto handle_ReminderID

				case ffjtTransferCounterpartyInfoTgBotID:
					goto handle_TgBotID

				case ffjtTransferCounterpartyInfoTgChatID:
					goto handle_TgChatID

				case ffjtTransferCounterpartyInfoTgReceiptByTgMsgID:
					goto handle_TgReceiptByTgMsgID

				case ffjtTransferCounterpartyInfonosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_UserID:

	/* handler: j.UserID type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.UserID = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_UserName:

	/* handler: j.UserName type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.UserName = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ContactID:

	/* handler: j.ContactID type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.ContactID = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ContactName:

	/* handler: j.ContactName type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.ContactName = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Note:

	/* handler: j.Note type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Note = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Comment:

	/* handler: j.Comment type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Comment = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ReminderID:

	/* handler: j.ReminderID type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.ReminderID = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TgBotID:

	/* handler: j.TgBotID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.TgBotID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TgChatID:

	/* handler: j.TgChatID type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.TgChatID = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TgReceiptByTgMsgID:

	/* handler: j.TgReceiptByTgMsgID type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.TgReceiptByTgMsgID = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
